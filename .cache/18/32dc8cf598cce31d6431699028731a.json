{"id":"node_modules/split/index.js","dependencies":[{"name":"C:\\Users\\hp\\Desktop\\ankageo-projects\\openlayers\\line\\package.json","includedInParent":true,"mtime":1603110307863},{"name":"C:\\Users\\hp\\Desktop\\ankageo-projects\\openlayers\\line\\node_modules\\split\\package.json","includedInParent":true,"mtime":1603109857061},{"name":"through","loc":{"line":8,"column":22},"parent":"C:\\Users\\hp\\Desktop\\ankageo-projects\\openlayers\\line\\node_modules\\split\\index.js","resolved":"C:\\Users\\hp\\Desktop\\ankageo-projects\\openlayers\\line\\node_modules\\through\\index.js"},{"name":"string_decoder","loc":{"line":9,"column":22},"parent":"C:\\Users\\hp\\Desktop\\ankageo-projects\\openlayers\\line\\node_modules\\split\\index.js","resolved":"C:\\Users\\hp\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\string_decoder\\lib\\string_decoder.js"}],"generated":{"js":"//filter will reemit the data if cb(err,pass) pass is truthy\n\n// reduce is more tricky\n// maybe we want to group the reductions or emit progress updates occasionally\n// the most basic reduce just emits one 'data' event after it has recieved 'end'\n\n\nvar through = require('through')\nvar Decoder = require('string_decoder').StringDecoder\n\nmodule.exports = split\n\n//TODO pass in a function to map across the lines.\n\nfunction split (matcher, mapper, options) {\n  var decoder = new Decoder()\n  var soFar = ''\n  var maxLength = options && options.maxLength;\n  var trailing = options && options.trailing === false ? false : true\n  if('function' === typeof matcher)\n    mapper = matcher, matcher = null\n  if (!matcher)\n    matcher = /\\r?\\n/\n\n  function emit(stream, piece) {\n    if(mapper) {\n      try {\n        piece = mapper(piece)\n      }\n      catch (err) {\n        return stream.emit('error', err)\n      }\n      if('undefined' !== typeof piece)\n        stream.queue(piece)\n    }\n    else\n      stream.queue(piece)\n  }\n\n  function next (stream, buffer) {\n    var pieces = ((soFar != null ? soFar : '') + buffer).split(matcher)\n    soFar = pieces.pop()\n\n    if (maxLength && soFar.length > maxLength)\n      return stream.emit('error', new Error('maximum buffer reached'))\n\n    for (var i = 0; i < pieces.length; i++) {\n      var piece = pieces[i]\n      emit(stream, piece)\n    }\n  }\n\n  return through(function (b) {\n    next(this, decoder.write(b))\n  },\n  function () {\n    if(decoder.end)\n      next(this, decoder.end())\n    if(trailing && soFar != null)\n      emit(this, soFar)\n    this.queue(null)\n  })\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/split/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/split/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/split/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/split/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/split/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/split/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/split/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/split/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/split/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/split/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/split/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/split/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/split/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/split/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/split/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/split/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/split/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/split/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/split/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/split/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/split/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/split/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/split/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/split/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/split/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/split/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/split/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/split/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/split/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/split/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/split/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/split/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/split/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/split/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/split/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/split/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/split/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/split/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/split/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/split/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/split/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/split/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/split/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/split/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/split/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/split/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/split/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/split/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/split/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/split/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/split/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/split/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/split/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/split/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/split/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/split/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/split/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/split/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/split/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/split/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/split/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/split/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/split/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/split/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}}],"sources":{"node_modules/split/index.js":"//filter will reemit the data if cb(err,pass) pass is truthy\n\n// reduce is more tricky\n// maybe we want to group the reductions or emit progress updates occasionally\n// the most basic reduce just emits one 'data' event after it has recieved 'end'\n\n\nvar through = require('through')\nvar Decoder = require('string_decoder').StringDecoder\n\nmodule.exports = split\n\n//TODO pass in a function to map across the lines.\n\nfunction split (matcher, mapper, options) {\n  var decoder = new Decoder()\n  var soFar = ''\n  var maxLength = options && options.maxLength;\n  var trailing = options && options.trailing === false ? false : true\n  if('function' === typeof matcher)\n    mapper = matcher, matcher = null\n  if (!matcher)\n    matcher = /\\r?\\n/\n\n  function emit(stream, piece) {\n    if(mapper) {\n      try {\n        piece = mapper(piece)\n      }\n      catch (err) {\n        return stream.emit('error', err)\n      }\n      if('undefined' !== typeof piece)\n        stream.queue(piece)\n    }\n    else\n      stream.queue(piece)\n  }\n\n  function next (stream, buffer) {\n    var pieces = ((soFar != null ? soFar : '') + buffer).split(matcher)\n    soFar = pieces.pop()\n\n    if (maxLength && soFar.length > maxLength)\n      return stream.emit('error', new Error('maximum buffer reached'))\n\n    for (var i = 0; i < pieces.length; i++) {\n      var piece = pieces[i]\n      emit(stream, piece)\n    }\n  }\n\n  return through(function (b) {\n    next(this, decoder.write(b))\n  },\n  function () {\n    if(decoder.end)\n      next(this, decoder.end())\n    if(trailing && soFar != null)\n      emit(this, soFar)\n    this.queue(null)\n  })\n}\n"},"lineCount":64}},"error":null,"hash":"46140ff23a807008f82c87cb45323c34","cacheData":{"env":{}}}